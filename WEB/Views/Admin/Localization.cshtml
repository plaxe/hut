@model WEB.Models.LocalizationViewModel
@{
    ViewData["Title"] = "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é";
    Layout = "_AdminLayout";
    
    string GetLanguageName(string code)
    {
        return code.ToLower() switch
        {
            "ua" => "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
            "en" => "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
            _ => code
        };
    }
    
    string GetLanguageFlag(string code)
    {
        return code.ToLower() switch
        {
            "ua" => "üá∫üá¶",
            "en" => "üá¨üáß",
            _ => "üåê"
        };
    }
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0">–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é</h1>
    <div>
        <form asp-action="ClearLocalizationCache" asp-controller="Admin" method="post" class="d-inline">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-danger" onclick="return confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó? –¶–µ –º–æ–∂–µ —Ç–∏–º—á–∞—Å–æ–≤–æ —Å–ø–æ–≤—ñ–ª—å–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É —Å–∞–π—Ç—É.');">
                <i class="bi bi-trash me-1"></i> –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à
            </button>
        </form>
    </div>
</div>

<div class="row mb-4">
    <div class="col-12">
        <div class="card admin-card">
            <div class="card-header d-flex justify-content-between align-items-center flex-wrap">
                <h5 class="mb-0">–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É</h5>
                <div class="mt-2 mt-md-0">
                    <div class="btn-group" role="group" aria-label="–ú–æ–≤–∏">
                        @foreach(var language in Model.AvailableLanguages)
                        {
                            <a href="@Url.Action("Localization", "Admin", new { language })" 
                               class="btn @(Model.CurrentLanguage == language ? "btn-primary" : "btn-outline-primary")">
                                @GetLanguageFlag(language) @GetLanguageName(language)
                            </a>
                        }
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="alert alert-info d-flex align-items-start" role="alert">
                    <i class="bi bi-info-circle-fill me-2 fs-5 mt-1"></i>
                    <div>
                        <strong>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó - @GetLanguageName(Model.CurrentLanguage) @GetLanguageFlag(Model.CurrentLanguage)</strong>
                        <p class="mb-0 mt-1">
                            –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∏ —Å–∞–π—Ç—É —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏. –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏—â–µ, –∞ –ø–æ—Ç—ñ–º –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–µ–∫—Å—Ç–∏. 
                            <strong>–í–∞–∂–ª–∏–≤–æ:</strong> –ó–º—ñ–Ω–∏ –Ω–∞–±—É–≤–∞—é—Ç—å —á–∏–Ω–Ω–æ—Å—Ç—ñ –Ω–µ–≥–∞–π–Ω–æ.
                        </p>
                    </div>
                </div>

                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="viewToggle">
                    <label class="form-check-label" for="viewToggle">–ü–æ–∫–∞–∑–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Ä–µ–≤–∞</label>
                </div>
                
                <div class="mb-3">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent border-end-0">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" id="searchInput" class="form-control border-start-0" placeholder="–ü–æ—à—É–∫ –∑–∞ –∫–ª—é—á–µ–º –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è–º...">
                    </div>
                    <div class="form-text">–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –∫–ª—é—á–∞–º–∏ —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏</div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <!-- –¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥ -->
        <div id="tableView" class="card admin-card">
            <div class="card-header">
                <h5 class="mb-0">–¢–∞–±–ª–∏—Ü—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table admin-table table-hover mb-0" id="localizationTable">
                        <thead>
                            <tr>
                                <th style="width: 40%">–ö–ª—é—á</th>
                                <th>–ó–Ω–∞—á–µ–Ω–Ω—è</th>
                                <th style="width: 80px">–î—ñ—ó</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                void RenderResources(List<WEB.Models.LocalizationCategoryModel> categories, string path = "")
                                {
                                    foreach (var category in categories)
                                    {
                                        var currentPath = string.IsNullOrEmpty(path) ? category.Key : $"{path}.{category.Key}";
                                        
                                        foreach (var resource in category.Resources)
                                        {
                                            <tr data-key="@resource.FullKey" data-value="@resource.Value">
                                                <td>
                                                    <code class="text-truncate d-inline-block" style="max-width: 100%;">@resource.FullKey</code>
                                                </td>
                                                <td class="text-break">@resource.Value</td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-outline-primary edit-resource"
                                                            data-key="@resource.FullKey" data-value="@resource.Value">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                        
                                        if (category.Categories.Any())
                                        {
                                            RenderResources(category.Categories, currentPath);
                                        }
                                    }
                                }
                                
                                RenderResources(Model.Categories);
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –≤–∏–¥ -->
        <div id="treeView" style="display: none;">
            @{
                void RenderCategoryTree(List<WEB.Models.LocalizationCategoryModel> categories, int level = 0)
                {
                    <div class="card admin-card mb-3">
                        <div class="list-group list-group-flush">
                            @foreach (var category in categories)
                            {
                                <div class="list-group-item p-0">
                                    <div class="p-3 d-flex justify-content-between align-items-center bg-hover-light">
                                        <div class="d-flex align-items-center">
                                            @if (category.Categories.Any() || category.Resources.Any())
                                            {
                                                <button class="btn btn-sm btn-link text-decoration-none p-0 me-2 toggle-category">
                                                    <i class="bi bi-chevron-down"></i>
                                                </button>
                                            }
                                            <strong class="text-primary">@category.Key</strong>
                                        </div>
                                        <span class="badge bg-secondary rounded-pill">
                                            @(category.Resources.Count + category.Categories.Sum(c => c.Resources.Count)) —ç–ª–µ–º.
                                        </span>
                                    </div>
                                    
                                    <div class="category-content px-2">
                                        @if (category.Resources.Any())
                                        {
                                            <div class="list-group list-group-flush">
                                                @foreach (var resource in category.Resources)
                                                {
                                                    <div class="list-group-item d-flex flex-column flex-md-row justify-content-between p-3 localization-item" data-key="@resource.FullKey" data-value="@resource.Value">
                                                        <div class="mb-2 mb-md-0 me-md-3">
                                                            <div class="text-muted small mb-1">–ö–ª—é—á:</div>
                                                            <code class="d-block text-truncate">@resource.Key</code>
                                                        </div>
                                                        <div class="flex-grow-1">
                                                            <div class="text-muted small mb-1">–ó–Ω–∞—á–µ–Ω–∏–µ:</div>
                                                            <div class="text-break mb-2">@resource.Value</div>
                                                        </div>
                                                        <div class="ms-auto d-flex align-items-start">
                                                            <button type="button" class="btn btn-sm btn-outline-primary edit-resource"
                                                                    data-key="@resource.FullKey" data-value="@resource.Value">
                                                                <i class="bi bi-pencil"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        
                                        @if (category.Categories.Any())
                                        {
                                            <div class="mt-2 ms-3 mb-3">
                                                @{RenderCategoryTree(category.Categories, level + 1);}
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                
                RenderCategoryTree(Model.Categories);
            }
        </div>
    </div>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
<div class="modal fade" id="editResourceModal" tabindex="-1" aria-labelledby="editResourceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <form id="editResourceForm" action="@Url.Action("UpdateLocalization", "Admin")" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="Language" value="@Model.CurrentLanguage">
                <input type="hidden" name="Key" id="editKey">
                
                <div class="modal-header">
                    <h5 class="modal-title" id="editResourceModalLabel">–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editKeyDisplay" class="form-label">–ö–ª—é—á:</label>
                        <input type="text" class="form-control" id="editKeyDisplay" disabled>
                    </div>
                    <div class="mb-3">
                        <label for="editValue" class="form-label">–ó–Ω–∞—á–µ–Ω–Ω—è:</label>
                        <textarea class="form-control" name="Value" id="editValue" rows="5" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-save me-1"></i>–ó–±–µ—Ä–µ–≥—Ç–∏
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const editButtons = document.querySelectorAll('.edit-resource');
            const editModal = new bootstrap.Modal(document.getElementById('editResourceModal'));
            
            editButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const key = this.getAttribute('data-key');
                    const value = this.getAttribute('data-value');
                    
                    document.getElementById('editKey').value = key;
                    document.getElementById('editKeyDisplay').value = key;
                    document.getElementById('editValue').value = value;
                    
                    editModal.show();
                });
            });
            
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—á–Ω—ã–º –∏ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–º –≤–∏–¥–æ–º
            const viewToggle = document.getElementById('viewToggle');
            const tableView = document.getElementById('tableView');
            const treeView = document.getElementById('treeView');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ localStorage
            const viewMode = localStorage.getItem('localizationViewMode');
            if (viewMode === 'tree') {
                tableView.style.display = 'none';
                treeView.style.display = 'block';
                viewToggle.checked = true;
            }
            
            viewToggle.addEventListener('change', function() {
                if (this.checked) {
                    tableView.style.display = 'none';
                    treeView.style.display = 'block';
                    localStorage.setItem('localizationViewMode', 'tree');
                } else {
                    tableView.style.display = 'block';
                    treeView.style.display = 'none';
                    localStorage.setItem('localizationViewMode', 'table');
                }
            });
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', function() {
                const searchText = this.value.toLowerCase();
                
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞
                const tableRows = document.querySelectorAll('#localizationTable tbody tr');
                
                tableRows.forEach(row => {
                    const key = row.getAttribute('data-key').toLowerCase();
                    const value = row.getAttribute('data-value').toLowerCase();
                    
                    if (key.includes(searchText) || value.includes(searchText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
                
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –≤–∏–¥–∞
                const treeItems = document.querySelectorAll('.localization-item');
                
                treeItems.forEach(item => {
                    const key = item.getAttribute('data-key').toLowerCase();
                    const value = item.getAttribute('data-value').toLowerCase();
                    
                    if (key.includes(searchText) || value.includes(searchText)) {
                        item.style.display = '';
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        let parent = item.closest('.category-content');
                        while (parent) {
                            parent.style.display = '';
                            let parentHeader = parent.previousElementSibling;
                            if (parentHeader && parentHeader.querySelector('.toggle-category i')) {
                                parentHeader.querySelector('.toggle-category i').classList.replace('bi-chevron-right', 'bi-chevron-down');
                            }
                            parent = parent.parentElement.closest('.category-content');
                        }
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
            
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const toggleButtons = document.querySelectorAll('.toggle-category');
            const categoryContents = document.querySelectorAll('.category-content');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            const styleElement = document.createElement('style');
            styleElement.textContent = `
                .category-content {
                    transition: max-height 0.3s ease-out, opacity 0.2s ease-out;
                    overflow: hidden;
                    max-height: 2000px; /* –ù–∞—á–∞–ª—å–Ω–æ–µ –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */
                    opacity: 1;
                }
                .category-content.collapsed {
                    max-height: 0;
                    opacity: 0;
                    padding-top: 0;
                    padding-bottom: 0;
                }
            `;
            document.head.appendChild(styleElement);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categoryContents.forEach(content => {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                content.classList.remove('collapsed');
            });
            
            toggleButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const categoryItem = this.closest('.list-group-item');
                    const contentElement = categoryItem.querySelector('.category-content');
                    const icon = this.querySelector('i');
                    
                    if (contentElement.classList.contains('collapsed')) {
                        contentElement.classList.remove('collapsed');
                        icon.classList.replace('bi-chevron-right', 'bi-chevron-down');
                    } else {
                        contentElement.classList.add('collapsed');
                        icon.classList.replace('bi-chevron-down', 'bi-chevron-right');
                    }
                });
            });
        });
    </script>
} 