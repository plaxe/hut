@model WEB.Models.LocalizationViewModel
@{
    ViewData["Title"] = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π";
    Layout = "_AdminLayout";
    
    string GetLanguageName(string code)
    {
        return code.ToLower() switch
        {
            "ua" => "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
            "en" => "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "ru" => "–†—É—Å—Å–∫–∏–π",
            _ => code
        };
    }
    
    string GetLanguageFlag(string code)
    {
        return code.ToLower() switch
        {
            "ua" => "üá∫üá¶",
            "en" => "üá¨üáß",
            "ru" => "üá∑üá∫",
            _ => "üåê"
        };
    }
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π</h1>
</div>

<div class="mb-4">
    <div class="btn-group" role="group" aria-label="–Ø–∑—ã–∫–∏">
        @foreach(var language in Model.AvailableLanguages)
        {
            <a href="@Url.Action("Localization", "Admin", new { language })" 
               class="btn @(Model.CurrentLanguage == language ? "btn-primary" : "btn-outline-primary")">
                @GetLanguageFlag(language) @GetLanguageName(language)
            </a>
        }
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="card bg-dark-subtle mb-4">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ - @GetLanguageName(Model.CurrentLanguage) @GetLanguageFlag(Model.CurrentLanguage)
                    </h5>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="viewToggle">
                        <label class="form-check-label" for="viewToggle">–î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –≤–∏–¥</label>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <p class="card-text">
                    –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã —Å–∞–π—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.
                </p>
                <p class="card-text text-warning">
                    <i class="bi bi-exclamation-triangle me-1"></i>
                    <strong>–í–∞–∂–Ω–æ:</strong> –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
                </p>
            </div>
        </div>
        
        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" id="searchInput" class="form-control" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á—É –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—é...">
            </div>
        </div>
        
        <div id="tableView">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="localizationTable">
                            <thead>
                                <tr>
                                    <th>–ö–ª—é—á</th>
                                    <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                                    <th width="120">–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    void RenderResources(List<WEB.Models.LocalizationCategoryModel> categories, string path = "")
                                    {
                                        foreach (var category in categories)
                                        {
                                            var currentPath = string.IsNullOrEmpty(path) ? category.Key : $"{path}.{category.Key}";
                                            
                                            foreach (var resource in category.Resources)
                                            {
                                                <tr data-key="@resource.FullKey" data-value="@resource.Value">
                                                    <td><code>@resource.FullKey</code></td>
                                                    <td>@resource.Value</td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-outline-primary edit-resource"
                                                                data-key="@resource.FullKey" data-value="@resource.Value">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                            
                                            if (category.Categories.Any())
                                            {
                                                RenderResources(category.Categories, currentPath);
                                            }
                                        }
                                    }
                                    
                                    RenderResources(Model.Categories);
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div id="treeView" style="display: none;">
            <div class="card">
                <div class="card-body">
                    <div id="localizationTree">
                        @{
                            void RenderCategoryTree(List<WEB.Models.LocalizationCategoryModel> categories, int level = 0)
                            {
                                <ul class="list-group @(level > 0 ? "ms-4 mt-2" : "")">
                                    @foreach (var category in categories)
                                    {
                                        <li class="list-group-item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <strong>@category.Key</strong>
                                                @if (category.Categories.Any() || category.Resources.Any())
                                                {
                                                    <button class="btn btn-sm btn-outline-secondary toggle-category">
                                                        <i class="bi bi-chevron-down"></i>
                                                    </button>
                                                }
                                            </div>
                                            
                                            <div class="category-content mt-2">
                                                @if (category.Resources.Any())
                                                {
                                                    <table class="table table-sm">
                                                        <tbody>
                                                            @foreach (var resource in category.Resources)
                                                            {
                                                                <tr data-key="@resource.FullKey" data-value="@resource.Value">
                                                                    <td width="30%"><code>@resource.Key</code></td>
                                                                    <td>@resource.Value</td>
                                                                    <td width="70px">
                                                                        <button type="button" class="btn btn-sm btn-outline-primary edit-resource"
                                                                                data-key="@resource.FullKey" data-value="@resource.Value">
                                                                            <i class="bi bi-pencil"></i>
                                                                        </button>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                }
                                                
                                                @if (category.Categories.Any())
                                                {
                                                    RenderCategoryTree(category.Categories, level + 1);
                                                }
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                            
                            RenderCategoryTree(Model.Categories);
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
<div class="modal fade" id="editResourceModal" tabindex="-1" aria-labelledby="editResourceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="editResourceForm" action="@Url.Action("UpdateLocalization", "Admin")" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="Language" value="@Model.CurrentLanguage">
                <input type="hidden" name="Key" id="editKey">
                
                <div class="modal-header">
                    <h5 class="modal-title" id="editResourceModalLabel">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editKeyDisplay" class="form-label">–ö–ª—é—á:</label>
                        <input type="text" class="form-control" id="editKeyDisplay" disabled>
                    </div>
                    <div class="mb-3">
                        <label for="editValue" class="form-label">–ó–Ω–∞—á–µ–Ω–∏–µ:</label>
                        <textarea class="form-control" name="Value" id="editValue" rows="5" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const editButtons = document.querySelectorAll('.edit-resource');
            const editModal = new bootstrap.Modal(document.getElementById('editResourceModal'));
            
            editButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const key = this.getAttribute('data-key');
                    const value = this.getAttribute('data-value');
                    
                    document.getElementById('editKey').value = key;
                    document.getElementById('editKeyDisplay').value = key;
                    document.getElementById('editValue').value = value;
                    
                    editModal.show();
                });
            });
            
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—á–Ω—ã–º –∏ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–º –≤–∏–¥–æ–º
            const viewToggle = document.getElementById('viewToggle');
            const tableView = document.getElementById('tableView');
            const treeView = document.getElementById('treeView');
            
            viewToggle.addEventListener('change', function() {
                if (this.checked) {
                    tableView.style.display = 'none';
                    treeView.style.display = 'block';
                } else {
                    tableView.style.display = 'block';
                    treeView.style.display = 'none';
                }
            });
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', function() {
                const searchText = this.value.toLowerCase();
                const tableRows = document.querySelectorAll('#localizationTable tbody tr');
                const treeRows = document.querySelectorAll('#localizationTree tr[data-key]');
                
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞
                tableRows.forEach(row => {
                    const key = row.getAttribute('data-key').toLowerCase();
                    const value = row.getAttribute('data-value').toLowerCase();
                    
                    if (key.includes(searchText) || value.includes(searchText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
                
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –≤–∏–¥–∞
                treeRows.forEach(row => {
                    const key = row.getAttribute('data-key').toLowerCase();
                    const value = row.getAttribute('data-value').toLowerCase();
                    
                    if (key.includes(searchText) || value.includes(searchText)) {
                        row.style.display = '';
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        let parent = row.closest('.category-content');
                        while (parent) {
                            parent.style.display = '';
                            parent = parent.parentElement.closest('.category-content');
                        }
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
            
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
            const toggleButtons = document.querySelectorAll('.toggle-category');
            toggleButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const contentElement = this.closest('li').querySelector('.category-content');
                    const icon = this.querySelector('i');
                    
                    if (contentElement.style.display === 'none') {
                        contentElement.style.display = '';
                        icon.classList.replace('bi-chevron-right', 'bi-chevron-down');
                    } else {
                        contentElement.style.display = 'none';
                        icon.classList.replace('bi-chevron-down', 'bi-chevron-right');
                    }
                });
            });
        });
    </script>
} 